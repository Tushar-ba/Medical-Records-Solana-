const anchor = require("@coral-xyz/anchor");
const { Program } = require("@coral-xyz/anchor");
const { Keypair, PublicKey, SystemProgram } = require("@solana/web3.js");
const fs = require("fs");
const os = require("os");
const path = require("path");

// Load the MedicalRecordSolana IDL (generated by Anchor)
const idl = require("../target/idl/medical_record_solana.json");

// Load the CLI wallet keypair
function loadKeypairFromFile() {
  try {
    // Default Solana CLI wallet path
    const walletPath = path.join(os.homedir(), ".config/solana/id.json");
    const walletData = fs.readFileSync(walletPath, "utf-8");
    const walletKeypair = JSON.parse(walletData);
    return Keypair.fromSecretKey(Uint8Array.from(walletKeypair));
  } catch (error) {
    console.error("Error loading CLI wallet keypair:", error.message);
    process.exit(1);
  }
}

async function initializeProgram() {
  try {
    // Set up the connection to Solana Devnet
    const connection = new anchor.web3.Connection("https://api.devnet.solana.com", "confirmed");

    // Load the CLI wallet
    const walletKeypair = loadKeypairFromFile();
    const wallet = new anchor.Wallet(walletKeypair);
    console.log("Wallet Public Key:", wallet.publicKey.toBase58());

    // Check wallet balance
    const balance = await connection.getBalance(wallet.publicKey);
    console.log("Wallet Balance:", balance / anchor.web3.LAMPORTS_PER_SOL, "SOL");
    if (balance < anchor.web3.LAMPORTS_PER_SOL) {
      console.error("Insufficient funds in wallet. Please fund the wallet with at least 1 SOL.");
      process.exit(1);
    }

    // Set up the Anchor provider
    const provider = new anchor.AnchorProvider(connection, wallet, {
      preflightCommitment: "confirmed",
    });
    anchor.setProvider(provider);

    // Load the program
    const programId = new PublicKey(idl.metadata.address); // Program ID from the IDL
    const program = new Program(idl, programId, provider);
    console.log("Program ID:", programId.toBase58());

    // Derive the admin PDA
    const [adminPDA] = anchor.web3.PublicKey.findProgramAddressSync(
      [Buffer.from("admin")],
      program.programId
    );
    console.log("Admin PDA:", adminPDA.toBase58());

    // Check if the admin account is already initialized
    try {
      const adminAccount = await program.account.admin.fetch(adminPDA);
      console.log("Admin account already initialized:", adminAccount);
      return;
    } catch (error) {
      if (error.message.includes("Account does not exist")) {
        console.log("Admin account not initialized. Proceeding with initialization...");
      } else {
        throw error;
      }
    }

    // Call the initialize instruction
    console.log("Initializing the admin account...");
    const tx = await program.methods
      .initialize()
      .accounts({
        authority: wallet.publicKey,
        adminAccount: adminPDA,
        systemProgram: SystemProgram.programId,
      })
      .rpc();

    console.log("Initialization Transaction Signature:", tx);

    // Fetch and verify the admin account
    const adminAccount = await program.account.admin.fetch(adminPDA);
    console.log("Admin Account Initialized:");
    console.log("  Authority:", adminAccount.authority.toBase58());
    console.log("  Read Authorities:", adminAccount.readAuthorities.map(pubkey => pubkey.toBase58()));
    console.log("  Write Authorities:", adminAccount.writeAuthorities.map(pubkey => pubkey.toBase58()));

    // Verify the transaction on Solana Explorer
    console.log("Verify the transaction on Solana Explorer:");
    console.log(`https://explorer.solana.com/tx/${tx}?cluster=devnet`);
  } catch (error) {
    console.error("Error initializing the program:", error.message);
    if (error.logs) {
      console.error("Transaction Logs:", error.logs);
    }
    process.exit(1);
  }
}

// Run the script
initializeProgram();